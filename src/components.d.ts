/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface HsBreadcrumb {
    }
    interface HsBreadcrumbItem {
        "src": any;
    }
    interface HsButton {
        "disabled": boolean;
        "size": string;
        "variant": "primary" | "payment" | "pill" | "text";
    }
    interface HsFlex {
        "direction": "row" | "column";
        "gap": number;
        "wrap": boolean;
        "xAlign": "center" | "start" | "end";
        "yAlign": "center" | "start" | "end"| "space-between" | "space-around" | "space-evenly";
    }
    interface HsGrid {
        "columns": number;
    }
    interface HsGridColumn {
    }
    interface HsHelpText {
        "type": "success" | "warning" | "primary" | "error";
    }
    interface HsRadioButton {
        "value": any;
    }
    interface HsRadioGroup {
        "name": any;
        "selected": any;
    }
    interface HsStack {
        "gap": 'large' | 'small';
        "orientation": "vertical" | "horizontal";
    }
    interface HsTextInput {
    }
}
export interface HsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHsButtonElement;
}
declare global {
    interface HTMLHsBreadcrumbElement extends Components.HsBreadcrumb, HTMLStencilElement {
    }
    var HTMLHsBreadcrumbElement: {
        prototype: HTMLHsBreadcrumbElement;
        new (): HTMLHsBreadcrumbElement;
    };
    interface HTMLHsBreadcrumbItemElement extends Components.HsBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLHsBreadcrumbItemElement: {
        prototype: HTMLHsBreadcrumbItemElement;
        new (): HTMLHsBreadcrumbItemElement;
    };
    interface HTMLHsButtonElement extends Components.HsButton, HTMLStencilElement {
    }
    var HTMLHsButtonElement: {
        prototype: HTMLHsButtonElement;
        new (): HTMLHsButtonElement;
    };
    interface HTMLHsFlexElement extends Components.HsFlex, HTMLStencilElement {
    }
    var HTMLHsFlexElement: {
        prototype: HTMLHsFlexElement;
        new (): HTMLHsFlexElement;
    };
    interface HTMLHsGridElement extends Components.HsGrid, HTMLStencilElement {
    }
    var HTMLHsGridElement: {
        prototype: HTMLHsGridElement;
        new (): HTMLHsGridElement;
    };
    interface HTMLHsGridColumnElement extends Components.HsGridColumn, HTMLStencilElement {
    }
    var HTMLHsGridColumnElement: {
        prototype: HTMLHsGridColumnElement;
        new (): HTMLHsGridColumnElement;
    };
    interface HTMLHsHelpTextElement extends Components.HsHelpText, HTMLStencilElement {
    }
    var HTMLHsHelpTextElement: {
        prototype: HTMLHsHelpTextElement;
        new (): HTMLHsHelpTextElement;
    };
    interface HTMLHsRadioButtonElement extends Components.HsRadioButton, HTMLStencilElement {
    }
    var HTMLHsRadioButtonElement: {
        prototype: HTMLHsRadioButtonElement;
        new (): HTMLHsRadioButtonElement;
    };
    interface HTMLHsRadioGroupElement extends Components.HsRadioGroup, HTMLStencilElement {
    }
    var HTMLHsRadioGroupElement: {
        prototype: HTMLHsRadioGroupElement;
        new (): HTMLHsRadioGroupElement;
    };
    interface HTMLHsStackElement extends Components.HsStack, HTMLStencilElement {
    }
    var HTMLHsStackElement: {
        prototype: HTMLHsStackElement;
        new (): HTMLHsStackElement;
    };
    interface HTMLHsTextInputElement extends Components.HsTextInput, HTMLStencilElement {
    }
    var HTMLHsTextInputElement: {
        prototype: HTMLHsTextInputElement;
        new (): HTMLHsTextInputElement;
    };
    interface HTMLElementTagNameMap {
        "hs-breadcrumb": HTMLHsBreadcrumbElement;
        "hs-breadcrumb-item": HTMLHsBreadcrumbItemElement;
        "hs-button": HTMLHsButtonElement;
        "hs-flex": HTMLHsFlexElement;
        "hs-grid": HTMLHsGridElement;
        "hs-grid-column": HTMLHsGridColumnElement;
        "hs-help-text": HTMLHsHelpTextElement;
        "hs-radio-button": HTMLHsRadioButtonElement;
        "hs-radio-group": HTMLHsRadioGroupElement;
        "hs-stack": HTMLHsStackElement;
        "hs-text-input": HTMLHsTextInputElement;
    }
}
declare namespace LocalJSX {
    interface HsBreadcrumb {
    }
    interface HsBreadcrumbItem {
        "src"?: any;
    }
    interface HsButton {
        "disabled"?: boolean;
        "onClicked"?: (event: HsButtonCustomEvent<any>) => void;
        "size"?: string;
        "variant"?: "primary" | "payment" | "pill" | "text";
    }
    interface HsFlex {
        "direction"?: "row" | "column";
        "gap"?: number;
        "wrap"?: boolean;
        "xAlign"?: "center" | "start" | "end";
        "yAlign"?: "center" | "start" | "end"| "space-between" | "space-around" | "space-evenly";
    }
    interface HsGrid {
        "columns"?: number;
    }
    interface HsGridColumn {
    }
    interface HsHelpText {
        "type"?: "success" | "warning" | "primary" | "error";
    }
    interface HsRadioButton {
        "value"?: any;
    }
    interface HsRadioGroup {
        "name"?: any;
        "selected"?: any;
    }
    interface HsStack {
        "gap"?: 'large' | 'small';
        "orientation"?: "vertical" | "horizontal";
    }
    interface HsTextInput {
    }
    interface IntrinsicElements {
        "hs-breadcrumb": HsBreadcrumb;
        "hs-breadcrumb-item": HsBreadcrumbItem;
        "hs-button": HsButton;
        "hs-flex": HsFlex;
        "hs-grid": HsGrid;
        "hs-grid-column": HsGridColumn;
        "hs-help-text": HsHelpText;
        "hs-radio-button": HsRadioButton;
        "hs-radio-group": HsRadioGroup;
        "hs-stack": HsStack;
        "hs-text-input": HsTextInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "hs-breadcrumb": LocalJSX.HsBreadcrumb & JSXBase.HTMLAttributes<HTMLHsBreadcrumbElement>;
            "hs-breadcrumb-item": LocalJSX.HsBreadcrumbItem & JSXBase.HTMLAttributes<HTMLHsBreadcrumbItemElement>;
            "hs-button": LocalJSX.HsButton & JSXBase.HTMLAttributes<HTMLHsButtonElement>;
            "hs-flex": LocalJSX.HsFlex & JSXBase.HTMLAttributes<HTMLHsFlexElement>;
            "hs-grid": LocalJSX.HsGrid & JSXBase.HTMLAttributes<HTMLHsGridElement>;
            "hs-grid-column": LocalJSX.HsGridColumn & JSXBase.HTMLAttributes<HTMLHsGridColumnElement>;
            "hs-help-text": LocalJSX.HsHelpText & JSXBase.HTMLAttributes<HTMLHsHelpTextElement>;
            "hs-radio-button": LocalJSX.HsRadioButton & JSXBase.HTMLAttributes<HTMLHsRadioButtonElement>;
            "hs-radio-group": LocalJSX.HsRadioGroup & JSXBase.HTMLAttributes<HTMLHsRadioGroupElement>;
            "hs-stack": LocalJSX.HsStack & JSXBase.HTMLAttributes<HTMLHsStackElement>;
            "hs-text-input": LocalJSX.HsTextInput & JSXBase.HTMLAttributes<HTMLHsTextInputElement>;
        }
    }
}
